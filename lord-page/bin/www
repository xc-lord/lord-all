#!/usr/bin/env node

(function() {
  'use strict';

  var path = require('path');
  var logger = require('../lib/logger')(path.basename(__filename));
  var http = require('http');

  logger.level('debug');

  process.env.NODE_ENV = 'Local';

  var app = require('../app');

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || '3002');
  app.set('port', port);

  /** 全局配置 */
  global.serverPort = port;

  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on('error', function(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof(port==='string') ? ('Pipe '+port) : ('Port '+port);

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        logger.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;

      case 'EADDRINUSE':
        logger.error(bind + ' is already in use');
        process.exit(1);
        break;

      default:
        throw error;
    }
  });
  server.on('listening', function() {
    var addr = server.address();
    var bind = (typeof(addr)==='string') ? ('pipe '+addr) : ('port '+addr.port);
    logger.info('Listening on ' + bind);
  });

  function normalizePort(val) {
    /**
     * Normalize a port into a number, string, or false.
     */
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (0 < port && port < 65535) {
      // port number
      return port;
    }

    return false;
  }
})();
